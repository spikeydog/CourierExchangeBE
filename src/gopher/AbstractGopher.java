package gopher;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLTimeoutException;
import java.sql.Statement;

/**
 * This class handles the basics of database connectivity by connecting, 
 * executing queries, and disconnecting from the database.
 * 
 * @author sedog
 */
public abstract class AbstractGopher {
    /** The name of the Java class to obtain a Class object for. */
    private final String DRIVER_CLASS = "oracle.jdbc.driver.OracleDriver";
    /** The status code indicating a failure to locate the oracle driver. */
    public final int FAILURE = -1;
    /** The connection to use for interactions with the database. */
    private Connection connection;
    /** The statement to use for queries to the database. */
    private Statement statement;
	
    /**
     * Instantiates a new <code>AbstractGopher</code>.
     */
    protected AbstractGopher() {
        // Nothing to initialize
    }

    /**
     * This method attempts to establish a new connection to the database.
     */
    protected final void connect() {
        /* Verify the oracle database driver is installed. */
        try {
            Class.forName(DRIVER_CLASS);

        /* The oracle database driver was not found. */
        } catch (ClassNotFoundException ex) {
            System.err.println(ex);
            System.exit(FAILURE);
        }

        try {
            connection = DriverManager.getConnection(
                    "jdbc:oracle:thin:@cci-ora02.uncc.edu:1521:class", 
                    "sedog","qwe123");
        } catch (SQLException ex) {
            System.err.println("Unable to connect to the database.");
            ex.printStackTrace();
        }
    }

    /**
     * This method executes accepts a raw SQL statement and executes the 
     * underlying operation on the database.
     * 
     * @param	query	the <code>String</code> that contains the SQL query
     * @return	results	the <code>ResultSet</code> generated by the statement
     */
    protected ResultSet executeQuery(String query) {

        ResultSet results = null;


        try {
            connect();
            statement = connection.createStatement();
            results = statement.executeQuery(query);
            disconnect();

        } catch (SQLTimeoutException ex) {
            System.err.println("Timeout exceeded for this database query.");
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
            ex.printStackTrace();
        }

        return results;
    }

    /**
     * This method attempts to gracefully disconnect from the database.
     */
    protected final void disconnect() {
        if (null != connection) {
            /* Attempt to gracefully disconnect. */
            try {
                connection.close();

            /* Some error occurred while disconnection. Print stacktrace. */
            } catch (SQLException ex) {
                System.err.println("Error encountered during disconnect.");
                ex.printStackTrace();
            }
        }
    }
}
